
POSTLAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00000458  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001ca  008001ca  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7b  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006db  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d8  00000000  00000000  000023d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3c       	cpi	r26, 0xCA	; 202
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ec       	ldi	r26, 0xCA	; 202
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  9e:	0c 94 2a 02 	jmp	0x454	; 0x454 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	//PORTB = bufferTX;
    }
}

void initADC(void){
		ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0);				//REFERENCIA AVCC = 5V
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
		ADMUX |= (1<<ADLAR);				//JUSTIFICACIÓN A LA IZQUIERDA
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
		ADMUX |= ((1<<MUX2) | (1<<MUX1));	//AL COLOCAR 0110 INDICAMOS EL ADC6 COMO EL RECEPTOR DE LA SEÑAL ANALÓGICA
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
		
		ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
		ADCSRA |= (1<<ADIE);				//HABILITaR INTERRUPCIONES DE ADC
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	//PRESCALER DE 128 ----> 125kHz
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADEN);				//HABILITANDO EL ADC
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <initUART9600>:
}

void initUART9600(void){
	//Paso 0: DEFINIR SALIDAS
	
	DDRB = (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5);			//Colocar puerto B como salida
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0)|(1<<DDC1);													//COLOCAR A0 y A1 como salidas
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	87 b9       	out	0x07, r24	; 7
	
	//Paso 1: RX como entrada y TX como salida 
	DDRD &= ~(1<<DDD0); //RX Como Entrada
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);	//TX Como Salida
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2: Configurar UCSR0A
	
	UCSR0A = 0;						//Resetear Registro
  ec:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: Configurar UCSR0B Habilitando ISR de recepción, rx y tx 
	
	UCSR0B = 0;											//Resetear Registro
  f0:	e1 ec       	ldi	r30, 0xC1	; 193
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);	//Habilitar Interrupciones de RX, Recepción, Transmisión
  f6:	80 81       	ld	r24, Z
  f8:	88 69       	ori	r24, 0x98	; 152
  fa:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, Asincrono, Pariedad: None, 1 bit de Stop, Data bits: 8
	
	UCSR0C = 0;											//Resetear Registro
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);				//Colocar 8 bits de datos
 102:	80 81       	ld	r24, Z
 104:	86 60       	ori	r24, 0x06	; 6
 106:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de Baudrate: 9600
	
	UBRR0 = 103;
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	estado = 0;
 114:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <estado>
 118:	08 95       	ret

0000011a <writeTextUART>:

}

void writeTextUART(char* Texto){
 11a:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; Texto[i]!='\0'; i++){
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	07 c0       	rjmp	.+14     	; 0x12e <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
 120:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 124:	95 ff       	sbrs	r25, 5
 126:	fc cf       	rjmp	.-8      	; 0x120 <writeTextUART+0x6>
		UDR0 = Texto[i];
 128:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

}

void writeTextUART(char* Texto){
	uint8_t i;
	for(i=0; Texto[i]!='\0'; i++){
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	fa 01       	movw	r30, r20
 130:	e2 0f       	add	r30, r18
 132:	f1 1d       	adc	r31, r1
 134:	30 81       	ld	r19, Z
 136:	31 11       	cpse	r19, r1
 138:	f3 cf       	rjmp	.-26     	; 0x120 <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
	
}
 13a:	08 95       	ret

0000013c <writeUART>:

void writeUART(char Caracter){
	while(!(UCSR0A & (1<<UDRE0)));
 13c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 140:	95 ff       	sbrs	r25, 5
 142:	fc cf       	rjmp	.-8      	; 0x13c <writeUART>
	
	UDR0 = Caracter;
 144:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 148:	08 95       	ret

0000014a <menu>:
}

void menu(void){
	writeTextUART("---------------------------------------");
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
	writeUART(10);
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 158:	8d e0       	ldi	r24, 0x0D	; 13
 15a:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeTextUART("Eliga una opcion:");
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
	writeUART(10);
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(10);
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeTextUART("1. Leer Potenciometro");	//31 es 1 en Hexadecimal según ANSII
 17e:	8a e3       	ldi	r24, 0x3A	; 58
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
	writeUART(10);
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 18c:	8d e0       	ldi	r24, 0x0D	; 13
 18e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(10);
 192:	8a e0       	ldi	r24, 0x0A	; 10
 194:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 198:	8d e0       	ldi	r24, 0x0D	; 13
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeTextUART("2. Enviar Ascii");		//32 es 2 en Hexadecimal según ANSII
 19e:	80 e5       	ldi	r24, 0x50	; 80
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
	//writeUART('B');
	writeUART(10);
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(1);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
 1b8:	08 95       	ret

000001ba <main>:
volatile uint8_t intD;
volatile uint8_t intU;

int main(void)
{
    initUART9600();
 1ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <initUART9600>
	initADC();
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 1c2:	78 94       	sei
	menu();
 1c4:	0e 94 a5 00 	call	0x14a	; 0x14a <menu>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0xe>

000001ca <comprobarque>:
	writeUART(10);
	writeUART(13);
	writeUART(1);
}

void comprobarque(char opcion, char valorP){
 1ca:	cf 93       	push	r28
 1cc:	c6 2f       	mov	r28, r22
			writeTextUART("MAHE 1 O 2 PUTA!");
			writeUART(10);
			writeUART(13);
			menu();
			}*/
		if(estado == 1)
 1ce:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <estado>
 1d2:	91 30       	cpi	r25, 0x01	; 1
 1d4:	a9 f4       	brne	.+42     	; 0x200 <comprobarque+0x36>
		{
		PORTB = opcion;
 1d6:	85 b9       	out	0x05, r24	; 5
		PORTC = (opcion>>6);
 1d8:	82 95       	swap	r24
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	83 70       	andi	r24, 0x03	; 3
 1e0:	88 b9       	out	0x08, r24	; 8
		estado = 0;
 1e2:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <estado>
		writeTextUART("LISTO");
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		menu();
 1fa:	0e 94 a5 00 	call	0x14a	; 0x14a <menu>
 1fe:	78 c0       	rjmp	.+240    	; 0x2f0 <comprobarque+0x126>
		}
		else if(estado == 0){
 200:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <estado>
 204:	91 11       	cpse	r25, r1
 206:	74 c0       	rjmp	.+232    	; 0x2f0 <comprobarque+0x126>
		if(opcion == 49)
 208:	81 33       	cpi	r24, 0x31	; 49
 20a:	09 f0       	breq	.+2      	; 0x20e <comprobarque+0x44>
 20c:	41 c0       	rjmp	.+130    	; 0x290 <comprobarque+0xc6>
		{
		writeUART(10);
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 214:	8d e0       	ldi	r24, 0x0D	; 13
 216:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeTextUART("Elegiste la opcion 1");	
 21a:	86 e6       	ldi	r24, 0x66	; 102
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeTextUART("---------------------------------------");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 23c:	8d e0       	ldi	r24, 0x0D	; 13
 23e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeTextUART("El valor de tu potenciometro es:");
 242:	8b e7       	ldi	r24, 0x7B	; 123
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		ADCSRA |= (1<<ADSC);				//ADC START CONVERSION
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24
		writeUART(valorP);
 254:	8c 2f       	mov	r24, r28
 256:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(intC);
 25a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <intC>
 25e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(intD);
 262:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <intD>
 266:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(intU);
 26a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <intU>
 26e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(10);
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(10);
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 284:	8d e0       	ldi	r24, 0x0D	; 13
 286:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		menu();
 28a:	0e 94 a5 00 	call	0x14a	; 0x14a <menu>
 28e:	30 c0       	rjmp	.+96     	; 0x2f0 <comprobarque+0x126>
		}
		else if(opcion == 50)
 290:	82 33       	cpi	r24, 0x32	; 50
 292:	11 f5       	brne	.+68     	; 0x2d8 <comprobarque+0x10e>
		{
		writeTextUART("Elegiste la opcion 2");
 294:	8c e9       	ldi	r24, 0x9C	; 156
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		estado = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <estado>
		writeTextUART("---------------------------------------");
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeTextUART("Mande un Caracter");
 2c2:	81 eb       	ldi	r24, 0xB1	; 177
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <comprobarque+0x126>
		}
		else
		{
		writeTextUART("ERROR");
 2d8:	83 ec       	ldi	r24, 0xC3	; 195
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 8d 00 	call	0x11a	; 0x11a <writeTextUART>
		writeUART(10);
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		writeUART(13);
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
		menu();
 2ec:	0e 94 a5 00 	call	0x14a	; 0x14a <menu>
		}
		}
	}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <__vector_18>:

ISR(USART_RX_vect){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	//while(!(UCSR0A & (1<<UDRE0)));
	//UDR0 = bufferTX;
	
	
	
	opcion = UDR0;
 316:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 31a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	comprobarque(opcion, valorP);
 31e:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <valorP>
 322:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 326:	0e 94 e5 00 	call	0x1ca	; 0x1ca <comprobarque>
	writeUART(10);
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
	writeUART(13);
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	0e 94 9e 00 	call	0x13c	; 0x13c <writeUART>
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_21>:

ISR (ADC_vect){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	
	valorP = ADCH;
 378:	e9 e7       	ldi	r30, 0x79	; 121
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <valorP>
	//UDR0 = valorP;
	//while(!(UCSR0A & (1<<UDRE0)));
	//UDR0 = valorP;
	intC = ADCH/100;
 382:	80 81       	ld	r24, Z
 384:	99 e2       	ldi	r25, 0x29	; 41
 386:	89 9f       	mul	r24, r25
 388:	81 2d       	mov	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <intC>
	intD = (ADCH-intC*100)/10;
 394:	80 81       	ld	r24, Z
 396:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <intC>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	34 e6       	ldi	r19, 0x64	; 100
 39e:	23 9f       	mul	r18, r19
 3a0:	80 19       	sub	r24, r0
 3a2:	91 09       	sbc	r25, r1
 3a4:	11 24       	eor	r1, r1
 3a6:	6a e0       	ldi	r22, 0x0A	; 10
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 02 02 	call	0x404	; 0x404 <__divmodhi4>
 3ae:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <intD>
	intU = (ADC-(intC*100+intD*10));
 3b2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 3b6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3ba:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <intC>
 3be:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <intD>
 3c2:	88 0f       	add	r24, r24
 3c4:	98 2f       	mov	r25, r24
 3c6:	99 0f       	add	r25, r25
 3c8:	99 0f       	add	r25, r25
 3ca:	89 0f       	add	r24, r25
 3cc:	94 e6       	ldi	r25, 0x64	; 100
 3ce:	39 9f       	mul	r19, r25
 3d0:	80 0d       	add	r24, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	28 1b       	sub	r18, r24
 3d6:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <intU>
	ADCSRA |= (1<<ADIF);
 3da:	ea e7       	ldi	r30, 0x7A	; 122
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	80 61       	ori	r24, 0x10	; 16
 3e2:	80 83       	st	Z, r24
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <__divmodhi4>:
 404:	97 fb       	bst	r25, 7
 406:	07 2e       	mov	r0, r23
 408:	16 f4       	brtc	.+4      	; 0x40e <__divmodhi4+0xa>
 40a:	00 94       	com	r0
 40c:	07 d0       	rcall	.+14     	; 0x41c <__divmodhi4_neg1>
 40e:	77 fd       	sbrc	r23, 7
 410:	09 d0       	rcall	.+18     	; 0x424 <__divmodhi4_neg2>
 412:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodhi4>
 416:	07 fc       	sbrc	r0, 7
 418:	05 d0       	rcall	.+10     	; 0x424 <__divmodhi4_neg2>
 41a:	3e f4       	brtc	.+14     	; 0x42a <__divmodhi4_exit>

0000041c <__divmodhi4_neg1>:
 41c:	90 95       	com	r25
 41e:	81 95       	neg	r24
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <__divmodhi4_neg2>:
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255

0000042a <__divmodhi4_exit>:
 42a:	08 95       	ret

0000042c <__udivmodhi4>:
 42c:	aa 1b       	sub	r26, r26
 42e:	bb 1b       	sub	r27, r27
 430:	51 e1       	ldi	r21, 0x11	; 17
 432:	07 c0       	rjmp	.+14     	; 0x442 <__udivmodhi4_ep>

00000434 <__udivmodhi4_loop>:
 434:	aa 1f       	adc	r26, r26
 436:	bb 1f       	adc	r27, r27
 438:	a6 17       	cp	r26, r22
 43a:	b7 07       	cpc	r27, r23
 43c:	10 f0       	brcs	.+4      	; 0x442 <__udivmodhi4_ep>
 43e:	a6 1b       	sub	r26, r22
 440:	b7 0b       	sbc	r27, r23

00000442 <__udivmodhi4_ep>:
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	5a 95       	dec	r21
 448:	a9 f7       	brne	.-22     	; 0x434 <__udivmodhi4_loop>
 44a:	80 95       	com	r24
 44c:	90 95       	com	r25
 44e:	bc 01       	movw	r22, r24
 450:	cd 01       	movw	r24, r26
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
